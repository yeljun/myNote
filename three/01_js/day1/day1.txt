JavaScript
Django
AJAX
PROJECT
=============================================

1.js概述
    1，js：
    	是一种专门运行于js解释器/引擎中的解释型脚本语言
    2，js发展
    	1.1990 CMM(c--),-------> ScriptEase 网景公司
    	2.1995 LiveScript----->JavaScript
    	3.--96 ----JScript (微软)
    	4.--97 ---->ECMA（欧洲计算机制造商联合会） 网景将js的核心给ECMA，更名为ECMA Script，简称ES
    3，js组成
        1.核心 - ECMA Script
             包含了js中最基本的语法规范
        2，浏览器对象模型----BOM  ---（browser Object Model）
             允许js操作浏览器
        3，文档对象模型 ---DOM  -----（Docment Object Model）
             允许js操作HTML中的内容
-------------------------------------------------------
2.js的使用方式（重点）
    1，浏览器控制台中输入代码并执行
       测试时使用
       console.log("要输出的内容");
    2，js的使用方式
        1，在元素的事件中编写js的代码
           事件：用户在元素上所激发的一些行为操作
           onclick：当用户点击元素时要做的操作
           语法：
              <ANY onclick="js执行代码">
               --<button onclick="console.log("点点就点点")">点我试试</button>
        2,将代码嵌入在网页的<script></script>标记中
            在网页的任意位置处，都可以嵌入一个<script></scrtpt>标记
            语法：
               <script>
                   js可执行代码
               </script>
            注意：
                1，一个网页中语序有若干多对script
                2，script标记有顺序之分，先写先执行
                3，网页加载时就执行
            docment.write("<h1>向网页中输出的话</h1>");
        3,在网页中，引入外部的js文件
           1，创建一个js文件（xxx.js），并编写js代码
           2，在网页上对js文件进行引入
               <script src="js文件的路径"></script>
               注意：
                   1，script标记必须成对
                   2，在引入的标记中不允许编写其他的js脚本
---------------------------------------------------------
3.js的基础语法：
    1.js都是有语句组成的
        1.由运算符，关键字或表达式组成
        2.js中严格区分大小写
        3.每条语句都是;表示结束
    2，注释
        单行：//
        多行: /*  */
------------------------------------------------------
4.js中的变量 和 常量
   1.声明变量
      声明：var 变量名;
      赋值：变量名=值;
      声明并赋值 var 变量名= 值
      eg.:
         var uname="王小明"
         console.log(uname);

         var uname="隔壁老王",uage=35,ugender;
      注意：
        1，在声明变量时，尽量使用var关键字，如果省略，也可以，但容易出问题
        2，声明变量如果未赋值的话，默认值为undefined
        3，如果使用未声明的变量的话，则为语法错误
    2,变量名的命名规范
        1，变量名不能是js中的关键字或保留关键字
        2，由字母，数字，下划线(_)以及$组成
           var $=35;
           var _age=46;
        3,变量不能以数字开头
        4，尽量不要重复
        5，尽量见明知意
        6，如无特殊需求的话，尽量使用小驼峰命名法
           var userName
           强调：不能使用name 作为变量名
    3.变量的使用
        1,为变量赋值
            只要变量出现在赋值符号的左边，一律是复制操作
        2，获取变量的值
            只要变量没有出现在赋值符号的左边，一律是取值
            var age=35; //赋值
            console.log(age) //取值
            var newAge=age;  newAge:赋值，age：取值
            age=age+35;
    4,常量
        1，什么是常量：
           一经声明就不允许被修改的数据就是常量
        2，语法：
            const 常量名=值;
            注意
                1，常量声明号之后是不允许修改的，所以一定要赋初始值
                2，常量通常采用全大写的形式
    练习：
        1，创建一个网页
        2，舍命一个常量pi，值为3.14
        3，声明一个变量r表示一个圆的半径
        4，通过pi和r计算该圆的周长，并将结果保存在变量c中
        5，通过pi和r计算该圆的面积，并将结果保存在变量s中
        6，输出周长 和面积
             半径为。。 的圆的周长为。。
             半径为。。的原的面积为。。
        精度丢失：保留到n位小数
           var l=3.1415926
           l=l.toFixed(n);
----------------------------------------------------
5，数据类型
   js数据类型可分为两大类
    1，基本数据类型
    	1，number 类型
    	   数字类型，可以表示32位的整数以及64位的浮点数
    	   整数：
    	      十进制：var num=30;
    	      八进制: var num=010;
    	      十六进制：var num=0x21;
    	      注意：注意以上数字在打印的时候都是按照十进制值进行打印输出的
    	   小数：
    	      小数点计数法：var num=123.456;
    	      指数计数法：var num=1.4e2;
    	2,string 类型
    	    字符串类型
    	    注意：使用时，必须使用""或''引起来
    	    js中的字符串主要是有Unicode字符，数字，标点组成
    	    1.查看字符的Unicode码
    	       var str="冉";
    	       var uCode=str.charCodeAt().toString(10) //----20873  10表示的是10进制
    	    2,将Unicode码转换成对应的字符
    	       已知5f20 
    	       var str="\u5f20";
    	       console.log(str);
    	    3,中文范围
    	       "\u4e00"~"\u9fa5"
    	    4,转义字符
    	       \n:换行
    	       \t:制表符
    	       \":"
    	       \':'
    	       \\:\
    	3.boolean 类型
    	    布尔类型，只用于表示真(true)或假(false)
    	    注意：boolean类型可以参与带数字运算的，true 当成1运算，false当成0取运算
    	    var r=true+1;  //2
    	    var r=4* false; //0
    	4，查看数据类型
    	    使用typeof()或typeof
    	    查看变量的数据类型
    2，引用数据类型
--------------------------------------------------
6，数据类型转换：
    1，隐式转换
       大部分加法运算时，如果数据类型不一致的话可以进行隐式转换
       1，数字+字符串：将数字转换为字符串
          var num = 15; //number
          var str = "18" //string
          var r = num + str
       2,数字 + 布尔：将布尔类型转换为number
       3，字符串+布尔 ：将布尔类型转换为字符串
          var str = “你好” + true //你好true
       4，布尔 + 布尔：
          两个布尔在一起的运算都是讲布尔先转换为number在做数值运算
       注意：
           如果 -,*,/,%两端都是数字格式的字符串的话，是可以按照数字的方式进行运算的
           “35”-“48”=-13
           "35"- "你好":NaN (Not A Number)
    2，显式转换
        1, toString()
            作用：将任意类型的数据转换成字符串，并返回转换后的结果
            var num = 15; //number;
            var r = num.toString();
        2,parseInt()
            作用：将任意类型的数据尽量转换成整数，如果实在无法转换的话，返回会NaN
            eg.
               var r = parseInt("13");
               r:13 
        3,parseFloat()
            作用：将任意类型的数据转换为小数
            1，var r = parseFloat("35.7");
            2  var r = parseFloat("35.7你好");---35.7
            3  var r = parseFloat("你好35.7");---r:NaN
        4,Number()
          作用：将指定数据转换成数字，只要包含非法字符的话，结果就是NaN 
          eg.
              var r = Number("35.7")
              r:35.7
              var r = Number("35.7你好")
              r:NaN   
    练习：
    创建网页，完成练习
    在网页中弹出一个输入提示框
      var input = window.prompt("提示文字");//录入数据
      input变量中，保存的是用户输入的数据
    3，输入一个数字
    4，将输入的数据 +10,打印计算后的结果
    5，根据4的结果用typeof查看输入数据的数据类型
    6，将输入的结果转换为数字，在+10 查看结果

    注意：
       只要是在网页中获取的数据，一律都是字符串类型
----------------------------------------------
7，运算符
   1.算术运算符
      + - * / % ++(自增) --(自减)
      + ：加法拼接
      /: 5/2 ------2.5
      %: 3%5 ------3
          场合：
             1，倍数 或 奇偶性
             2，获取某数字的最后几位
                var num = 1234
      ++:自增原酸符，在自身数据基础上只做+1操作
         变量++ 或 ++变量
      --:自减运算符，在自身数据的基础上只做-1操作
         变量-- 或 --变量
      ++做后缀：变量++
         要先使用变量的值，在对变量进行自增
         var num = 5;
         //先输出的num的值，在对num+1
         console.log(num++) //5
         console.log(num)   //6
      ++做前缀:++变量
         var num = 5;
         //先对num+1，在打印输出
         console.log(++num) //6
         console.log(num) //6


